AWSTemplateFormatVersion: 2010-09-09
Description: Cloudformation Lab
Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t1.micro, t2.micro]
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  MaxSizeASG:
    Description: "Enter the Max Size for the ASG"
    Type: String
    AllowedValues: [1, 2, 3]
  MinSizeASG:
    Description: "Enter the Min Size for the ASG"
    Type: String
    AllowedValues: [1, 2, 3]
  DesiredCapacityASG:
    Description: "Enter the desired capacity for the ASG"
    Type: String
    AllowedValues: [1, 2, 3]
  VPCZoneIdentifier:
    Description: "List the Subnet Ids of the instances"
    Type: AWS::EC2::VPC::Id
  Subnets:
    Description: "Subtens list"
    Type: List<AWS::EC2::Subnet::Id>
Mappings:
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0d5eff06f840b45e9    
Resources:
  LabSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and ssh
      VpcId: !Ref VPCZoneIdentifier
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref SSHLocation
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0  
  myLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: myLaunchTemplate
      LaunchTemplateData:
        ImageId: !FindInMap [ AWSRegionArch2AMI, !Ref 'AWS::Region', HVM64 ]
        InstanceType: !Ref InstanceType
        SecurityGroupIds: [ !GetAtt LabSecurityGroup.GroupId ]
        KeyName: !Ref KeyName
  myElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups: [!Ref LabSecurityGroup]
      Subnets: !Ref Subnets
  myTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Name: myTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPCZoneIdentifier
  HTTPlistener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: "forward"
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref myTargetGroup
      LoadBalancerArn: !Ref myElasticLoadBalancer
      Port: 80
      Protocol: HTTP
  myAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchTemplate:
        LaunchTemplateId: !Ref myLaunchTemplate
        Version: !GetAtt myLaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSizeASG
      MaxSize: !Ref MaxSizeASG
      DesiredCapacity: !Ref DesiredCapacityASG
      HealthCheckType: ELB
      HealthCheckGracePeriod: 600
      MaxInstanceLifetime: 2592000
      TargetGroupARNs: [!Ref myTargetGroup]
      
  myScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref myAutoscalingGroup
      ScalingAdjustment: '1'
    
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '75'
      AlarmDescription: Scale-out if CPU > 75% for 1 minute
      Period: '60'
      AlarmActions: [!Ref myScaleOutPolicy]
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref myAutoscalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
      
  myScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref myAutoscalingGroup
      ScalingAdjustment: '-1'
    
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '25'
      AlarmDescription: Scale-in if CPU < 25% for 1 minute
      Period: '60'
      AlarmActions: [!Ref myScaleInPolicy]
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref myAutoscalingGroup
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
#Route 53      
  DNS: 
    Type: "AWS::Route53::HostedZone"
    Properties: 
      HostedZoneConfig: 
        Comment: 'My hosted zone for example.com'
      Name: 'example.com'
	
  myDNSRecord1:
    Type: AWS::Route53::RecordSet
    Properties:
	    HostedZoneId : Z8VLZEXAMPLE
	    Name: test.example.com
	    ResourceRecords:
	    - 192.0.2.99
	    TTL: 900
	    Type: A
	
  myDNSRecord2:
    Type: AWS::Route53::RecordSet
    Properties:
	    HostedZoneId : Z8VLZEXAMPLE
	    Name: test.example.com
	    ResourceRecords:
	    - 192.0.2.99
	    TTL: 900
	    Type: A
    
Outputs: 
  DNSNameForMyLoadBalancer:
    Value: !GetAtt myElasticLoadBalancer.DNSName
    Description: DNSName of the loadbalancer
